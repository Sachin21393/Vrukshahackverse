
const bodyParser = require("body-parser");
const express=require("express")
const mongoose =require("mongoose");
const ejs=require("ejs");
var qr = require('qr-image');
const { MessageMedia  } = require('whatsapp-web.js');
const { Buttons } = require('whatsapp-web.js/src/structures');
const qrcode = require("qrcode-terminal");
const { Client } =require( "whatsapp-web.js");
const app=express();
app.use(express.json());
app.use(express.static('public'));
app.set('view engine', 'ejs');
let pusht="";
const { Configuration, OpenAIApi } = require("openai");
const configuration = new Configuration({
  apiKey:"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",
});
const openai = new OpenAIApi(configuration);
mongoose.connect("mongodb://127.0.0.1:27017/Vruksh", { useNewUrlParser: true },{
    useNewUrlParser: true,
    useUnifiedTopology: true,

}).catch((err) => {
    console.log("Error connecting to database", err);
    
});
const axios = require('axios');
const tokenn={
    token:String,
}
const alert=mongoose.model("alert",tokenn);
const plantsSchema={
    hour:Number,
    minute:Number,
    second:Number,
    status:String,
    stage:String,
    Frequency:Number,
    plantbio:String,
    name:String

}
const growplants=mongoose.model("growplants",plantsSchema);
const reccomendplant={
    plant:String,
    description:String,
    procedure:String,
    duration:String,
    type:String,
    image:String,

}
let waterLevel=100
const plant=mongoose.model("plant",reccomendplant);

  app.post("/give",async(req,res)=>{
    let token=req.body
    const data=new alert({...token});
    const result=await alert.findByIdAndUpdate("643b7cc025bad4015eb6601f",{...token},{new:true});
    res.json({"token":result})
  })
  const send=async(message)=>{
    const t=await alert.findById("643b7cc025bad4015eb6601f");
    const headers = {
        'Content-Type': 'application/json',
        'Authorization': 'key=AAAAYLnN3WI:APA91bH4MdcLGmGf01ryZ94sEuWkgtBlzuYlz7yRRpdHQGMtzf1ZMsfVuL-9Hp4FgRRLDs_fHYk2iBS_P1PvrDXNWxd5Hqu9QOU-uFV1S3-zRY-qHpdHPBerVWpIJeItsZvluK5oLaUG'
      }
    
      const response = axios.post('https://fcm.googleapis.com/fcm/send', {
        "to": t.token,
        "priority": "high",
        "time_to_live": 1000000,
        "fcm_options": {
          "analytics_label": "push_analytics"
        },
        "notification": {
          "title": "Update on your plant",
          "body":message
        }
      }, {
        headers: headers
      })
        .then((response) => {
          console.log(response)
        })
        .catch((error) => {
          console.log(error)
        })
    
  }
app.post("/generate",async(req,res)=>{
    let name=req.body.name;
    const completion = await openai.createCompletion({
        model: "text-davinci-003",
        prompt: generatePrompt(),
        temperature: 1,
        max_tokens:200
      });
      console.log(completion.data.choices[0].text);
    //   client.sendMessage(message.from, completion.data.choices[0].text);
    function generatePrompt() {
    const my=`Generate Description,procedure,suitable wheather for ${name} plant in proper format and separate paragraph `
      return `${my}`;
    }

})
 

app.post("/feed",async (req,res)=>{
    const data=req.body
    const info=new growplants({...data});
    const result=await info.save();
    res.json(result)
})
app.post("/usp1",async(req,res)=>{
    let name=req.body.name;
    let final;
const data=await growplants.findOne({name:name});

    let result
    let youtube=[];
    const params = {
        access_key: 'e3433d4820d59af4ea1b67a9abc782af',
        query: 'New York'
      }
      
     await axios.get('https://api.openweathermap.org/data/2.5/weather?lat=13.010632&lon=74.795183&appid=f301c3d4fc35f82ed1c5834e681248d9',)
        .then(response => {
          const apiResponse = response.data;
          // console.log(apiResponse);
           result={
              humidity:apiResponse.main.humidity,
              temperature:Math.ceil(apiResponse.main.temp-273.15),
              weather:apiResponse.weather[0].main,
              ph:6.3,
              wind:apiResponse.wind.speed
          }
          console.log(result);
      
        }).catch(error => {
          console.log(error);
        });

        const options1 = {
            method: 'GET',
            limit:3,
            url: 'https://youtube-search-results.p.rapidapi.com/youtube-search/',
            params: {q: `growing ${name}  plants`},
            headers: {
              'X-RapidAPI-Key': '919ad1b4efmsh5c64063fdf57b2ap1ecd82jsn8b07ec302f85',
              'X-RapidAPI-Host': 'youtube-search-results.p.rapidapi.com'
            }
          };
          
        await  axios.request(options1).then(function (response) {
            //   console.log(response.data.items);
for(let i=0;i<3;i++){
              let result1={
                title:response.data.items[i].title,
                url:response.data.items[i].url,
                thumbnail:response.data.items[i].bestThumbnail.url
              }
              youtube.push(result1);
              console.log(result1);

            }
          }).catch(function (error) {
              console.error(error);
          });
res.json({
    data:data,
    whetherdata:result,
    youtube:youtube

})


})
app.post("/plants",async(req,res)=>{
    let type=req.body.type;
    const data=await plant.find({type:type});
    res.json(data);
})
app.get('/',(req,res)=>{


    res.render("waterlevel",{
      waterLevel: waterLevel
    })
  waterLevel-=10
  if(waterLevel<=50 && waterLevel>=0){
    send(`Water Level is below ${waterLevel}% keep an eye` )
    
  }
  //notify
  
  });
app.post("/temp",async (req,res)=>{
    let result;
    const params = {
        access_key: 'e3433d4820d59af4ea1b67a9abc782af',
        query: 'New York'
      }
      
     await  axios.get('https://api.openweathermap.org/data/2.5/weather?lat=13.010632&lon=74.795183&appid=f301c3d4fc35f82ed1c5834e681248d9',)
        .then(response => {
          const apiResponse = response.data;
          // console.log(apiResponse);
           result={
              humidity:apiResponse.main.humidity,
              temperature:Math.ceil(apiResponse.main.temp-273.15),
              weather:apiResponse.weather[0].main,
              ph:6.3,
              wind:apiResponse.wind.speed
          }
          console.log(result);
      
        }).catch(error => {
          console.log(error);
        });
        res.json(result);
      
})

// const client = new Client();

// client.on('qr', qr => {
//     qrcode.generate(qr, {small: true});
// });

// client.on('ready', () => {
//     console.log('Client is ready!');
//     client.getChats().then((chats) => {
//      const myGroup=chats.find(
//       (chat)=>chat.name==="Chanakya"
//      ) ;

//     })
// });
// client.on('message',async  message => {

//   console.log(message.author)
//   // 918850708054@c.us
//   // 917738872498@c.us
//   if(message.author=='917738872498@c.us'){

//     const data=message.body
//     console.log(data.substr(6,2));


//     console.log(data)
//     if (data === 'Hello') {
//     //  
//     //  let button = new Buttons('My name is Zuma 🤖.Thank you for reaching out for help. We understand that taking the first step towards addressing your mental health can be difficult, but know that you are not alone and we are here to support you. Please let us know how we can best assist you and we will do our best to provide the resources and help you need."', [{ body: 'I need help' }, { body: 'Live Chat' },{body:'Book Appointment'}], 'Hi there 👋🏻', 'Take Care');
//     let info="Hey User ! I am your Vruksh Bot ask me anything related about your plants"
//     client.sendMessage(message.from, info);
//       }
//     else{
//     // const temp=await analysis.find({_id:_id});
//     // console.log(temp);

    
//     //   analysis.findOneAndUpdate({id:_id}, {$push:{arrayMessage:data},id:_id}, {upsert: true}, function(err, doc) {
//     //       if (err) return res.send(500, {error: err});
//     //       else console.log(doc);
//     //   });
//     const completion = await openai.createCompletion({
//       model: "text-davinci-003",
//       prompt: generatePrompt(),
//       temperature: 1,
//       max_tokens:900
//     });
//     console.log(completion.data.choices[0].text);
//     client.sendMessage(message.from, completion.data.choices[0].text);
//   function generatePrompt() {
//   const my=data
//     return `${my}`;
//   }
//     }
// }
// });

// client.initialize();

app.listen(80,(req,res)=>{
    console.log('listening on');
})
